buildscript {
	repositories {
		jcenter()
        $$BUILDSCRIPT_GRADLE_REPOSITORY_URLS$$
	}
	dependencies {
		classpath 'com.android.tools.build:gradle:2.3.3'
		$$GRADLE_CLASSPATH$$
	}
}

apply plugin: 'com.android.application'

allprojects {
    repositories {
    	jcenter()
	mavenCentral()
	google()
	$$GRADLE_REPOSITORY_URLS$$
    }
}

dependencies {
	$$GRADLE_DEPENDENCIES$$
}

android {

	lintOptions {
		abortOnError false
		disable 'MissingTranslation'
	}

	compileSdkVersion 27
	buildToolsVersion "27.0.3"
	useLibrary 'org.apache.http.legacy'

	packagingOptions {
		exclude 'META-INF/LICENSE'
		exclude 'META-INF/NOTICE'
		exclude 'META-INF/DEPENDENCIES'
	}
	defaultConfig {
		$$GRADLE_DEFAULT_CONFIG$$
        minSdkVersion 15
	}
	// Both signing and zip-aligning will be done at export time
	buildTypes.all { buildType ->
		buildType.zipAlignEnabled false
		buildType.signingConfig null
        ndk {
            abiFilters "armeabi-v7a"
        }
	}
	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			java.srcDirs = ['src'
				$$GRADLE_JAVA_DIRS$$
			]
			res.srcDirs = [
				'res'
				$$GRADLE_RES_DIRS$$  
			]
			aidl.srcDirs = [
				'aidl'
				$$GRADLE_AIDL_DIRS$$   
			]
			assets.srcDirs = [
				'assets'
				$$GRADLE_ASSET_DIRS$$
			]
		}
		debug.jniLibs.srcDirs = [
			'libs/debug'
			$$GRADLE_JNI_DIRS$$
		]
		release.jniLibs.srcDirs = [
			'libs/release'
			$$GRADLE_JNI_DIRS$$
		]
	}
	applicationVariants.all { variant ->
		// ApplicationVariant is undocumented, but this method is widely used; may break with another version of the Android Gradle plugin
		variant.outputs.get(0).setOutputFile(new File("${projectDir}/../../../bin", "android_${variant.name}.apk"))
	}
//    splits {
//        abi {
//            enable true
//            reset()
//            include 'armeabi-v7a'
//            universalApk false
//        }
//    }
}

$$GRADLE_PLUGINS$$

crashlytics {
  enableNdk true
  androidNdkOut 'libs/debug'
  androidNdkLibsOut 'libs/release'
  manifestPath 'AndroidManifest.xml'
}

gradle.taskGraph.whenReady { taskGraph ->
  def tasks = taskGraph.getAllTasks()
  tasks.each {
    def taskName = it.getName()
    if(taskName.startsWith("crashlyticsUploadSymbols")) {
      println("Found $taskName")
      it.setOnlyIf { true }
      it.outputs.upToDateWhen { false }
    }
  }
}